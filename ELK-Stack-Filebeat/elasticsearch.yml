clusterDomain: cluster.local
config: {}
coordinating:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 11
    minReplicas: 2
    targetCPU: ''
    targetMemory: ''
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  fullnameOverride: ''
  heapSize: 128m
  hostAliases: []
  initContainers: []
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: ''
  podLabels: {}
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicas: 1
  resources:
    limits:
       cpu: 1000m
       memory: 2048Mi
    requests:
      cpu: 25m
      memory: 256Mi
  schedulerName: ''
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    externalTrafficPolicy: Cluster
    loadBalancerIP: ''
    nodePort: ''
    port: 9200
    type: ClusterIP
  serviceAccount:
    create: false
    name: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
curator:
  affinity: {}
  command:
    - curator
  configMaps:
    action_file_yml: |-
      ---
      actions:
        1:
          action: delete_indices
          description: "Clean up ES by deleting old indices"
          options:
            timeout_override:
            continue_if_exception: False
            disable_action: False
            ignore_empty_list: True
          filters:
          - filtertype: age
            source: name
            direction: older
            timestring: '%Y.%m.%d'
            unit: days
            unit_count: 90
            field:
            stats_result:
            epoch:
            exclude: False
    config_yml: |-
      ---
      client:
        hosts:
          - {{ template "elasticsearch.coordinating.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
        port: {{ .Values.coordinating.service.port }}
        # url_prefix:
        # use_ssl: True
        # certificate:
        # client_cert:
        # client_key:
        # ssl_no_validate: True
        # http_auth:
        # timeout: 30
        # master_only: False
      # logging:
      #   loglevel: INFO
      #   logfile:
      #   logformat: default
      #   blacklist: ['elasticsearch', 'urllib3']
  cronjob:
    annotations: {}
    concurrencyPolicy: ''
    failedJobsHistoryLimit: ''
    jobRestartPolicy: Never
    schedule: 0 1 * * *
    successfulJobsHistoryLimit: ''
  dryrun: false
  enabled: false
  env: {}
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  hooks:
    install: false
    upgrade: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/elasticsearch-curator
    tag: 5.8.4-debian-10-r268
  initContainers: []
  name: curator
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: ''
  podLabels: {}
  priorityClassName: ''
  psp:
    create: false
  rbac:
    enabled: false
  resources:
    limits:
       cpu: 1000m
       memory: 2048Mi
    requests:
      cpu: 25m
      memory: 256Mi
  schedulerName: ''
  serviceAccount:
    create: true
    name: ''
  sidecars: []
  tolerations: []
  topologySpreadConstraints: []
data:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 11
    minReplicas: 2
    targetCPU: ''
    targetMemory: ''
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  fullnameOverride: ''
  heapSize: 1024m
  hostAliases: []
  initContainers: []
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: data
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    existingVolume: ''
    selector: {}
    size: 8Gi
    storageClass: ''
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: ''
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicas: 1
  resources:
    limits:
       cpu: 1000m
       memory: 2048Mi
    requests:
      cpu: 25m
      memory: 256Mi
  schedulerName: ''
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
  serviceAccount:
    create: false
    name: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdatePartition: ''
    type: RollingUpdate
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
extraConfig: {}
extraDeploy: []
extraEnvVars: []
extraEnvVarsConfigMap: ''
extraEnvVarsSecret: ''
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ''
global:
  coordinating:
    name: coordinating-only
  imagePullSecrets: []
  imageRegistry: ''
  kibanaEnabled: false
  storageClass: ''
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/elasticsearch
  tag: 7.17.0-debian-10-r22
ingest:
  affinity: {}
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  fullnameOverride: ''
  heapSize: 128m
  hostAliases: []
  initContainers: []
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: ingest
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: ''
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicas: 1
  resources:
    limits:
       cpu: 1000m
       memory: 2048Mi
    requests:
      cpu: 25m
      memory: 256Mi
  schedulerName: ''
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    loadBalancerIP: ''
    nodePort: ''
    port: 9300
    type: ClusterIP
  serviceAccount:
    create: false
    name: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
initScripts: {}
initScriptsCM: ''
initScriptsSecret: ''
kibana:
  elasticsearch:
    hosts:
      - '{{ include "elasticsearch.coordinating.fullname" . }}'
    port: 9200
master:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 11
    minReplicas: 2
    targetCPU: ''
    targetMemory: ''
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  fullnameOverride: ''
  heapSize: 128m
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ''
    enabled: false
    extraHosts: []
    extraPaths: []
    extraTls: []
    hostname: master.local
    path: /
    pathType: ImplementationSpecific
    secrets: []
    tls: false
  initContainers: []
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: master
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    existingVolume: ''
    selector: {}
    size: 8Gi
    storageClass: ''
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: ''
  podLabels: {}
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicas: 1
  resources:
    limits:
       cpu: 1000m
       memory: 2048Mi
    requests:
      cpu: 25m
      memory: 256Mi
  schedulerName: ''
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    loadBalancerIP: ''
    nodePort: ''
    port: 9300
    type: ClusterIP
  serviceAccount:
    create: false
    name: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
metrics:
  affinity: {}
  enabled: false
  extraArgs: []
  hostAliases: []
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/elasticsearch-exporter
    tag: 1.3.0-debian-10-r122
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: metrics
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations:
    prometheus.io/port: '9114'
    prometheus.io/scrape: 'true'
  podAntiAffinityPreset: ''
  podLabels: {}
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ''
  service:
    annotations:
      prometheus.io/port: '9114'
      prometheus.io/scrape: 'true'
    type: ClusterIP
  serviceMonitor:
    enabled: false
    interval: ''
    labels: {}
    namespace: ''
    scrapeTimeout: ''
    selector: {}
  tolerations: []
  topologySpreadConstraints: []
name: elastic
nameOverride: ''
plugins: ''
security:
  elasticPassword: ''
  enabled: false
  existingSecret: ''
  fipsMode: false
  tls:
    autoGenerated: false
    coordinating:
      existingSecret: ''
    data:
      existingSecret: ''
    ingest:
      existingSecret: ''
    keyPassword: ''
    keystoreFilename: elasticsearch.keystore.jks
    keystorePassword: ''
    master:
      existingSecret: ''
    restEncryption: true
    truststoreFilename: elasticsearch.truststore.jks
    truststorePassword: ''
    usePemCerts: false
    verificationMode: full
snapshotRepoPath: ''
sysctlImage:
  enabled: true
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/bitnami-shell
  resources:
    limits: {}
    requests: {}
  tag: 10-debian-10-r349
volumePermissions:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r349
  resources:
    limits: {}
    requests: {}