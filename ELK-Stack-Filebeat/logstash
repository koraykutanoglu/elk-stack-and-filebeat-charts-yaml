affinity: {}
clusterDomain: cluster.local
configFileName: logstash.conf
containerPorts:
  - containerPort: 8080
    name: http
    protocol: TCP
  - containerPort: 9600
    name: monitoring
    protocol: TCP
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
enableMonitoringAPI: true
enableMultiplePipelines: false
existingConfiguration: ''
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ''
extraEnvVarsSecret: ''
extraVolumeMounts: []
extraVolumes: []
filter: ''
fullnameOverride: ''
global:
  imagePullSecrets: []
  imageRegistry: ''
hostAliases: []
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/logstash
  tag: 7.17.0-debian-10-r19
ingress:
  annotations: {}
  apiVersion: ''
  enabled: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  hostname: logstash.local
  path: /
  pathType: ImplementationSpecific
  secrets: []
  tls: false
initContainers: []
input: |-
  # udp {
  #   port => 1514
  #   type => syslog
  # }
  # tcp {
  #   port => 1514
  #   type => syslog
  # }
  http { port => 8080 }
kubeVersion: ''
lifecycle: {}
livenessProbe:
  failureThreshold: 6
  httpGet:
    path: /
    port: monitoring
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/logstash-exporter
    tag: 7.3.0-debian-10-r452
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources:
    limits:
       cpu: 1000m
       memory: 2048Mi
    requests:
      cpu: 25m
      memory: 256Mi
  service:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: '9198'
      prometheus.io/scrape: 'true'
    clusterIP: ''
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePort: ''
    port: 9198
    type: ClusterIP
  serviceMonitor:
    enabled: false
    interval: ''
    namespace: ''
    scrapeTimeout: ''
    selector: {}
monitoringAPIPort: 9600
nameOverride: ''
nodeAffinityPreset:
  key: ''
  type: ''
  values: []
nodeSelector: {}
output: |-
   elasticsearch {
     hosts => ["elasticsearch-master:9200"]
     manage_template => true
     index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
   }
  # gelf {
  #   host => "${GRAYLOG_HOST}"
  #   port => ${GRAYLOG_PORT}
  # }
  #stdout {}
persistence:
  accessModes:
    - ReadWriteOnce
  annotations: {}
  enabled: false
  existingClaim: ''
  mountPath: /bitnami/logstash/data
  size: 2Gi
  storageClass: ''
podAffinityPreset: ''
podAnnotations: {}
podAntiAffinityPreset: soft
podDisruptionBudget:
  create: false
  maxUnavailable: ''
  minAvailable: 1
podManagementPolicy: OrderedReady
priorityClassName: ''
readinessProbe:
  failureThreshold: 6
  httpGet:
    path: /
    port: monitoring
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replicaCount: 1
resources:
  limits: {}
  requests: {}
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
service:
  annotations: {}
  clusterIP: ''
  externalTrafficPolicy: ''
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  ports:
    http:
      port: 8080
      protocol: TCP
      targetPort: http
  type: ClusterIP
tolerations: []
updateStrategy: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r349
  resources:
    limits: {}
    requests: {}
  securityContext:
    runAsUser: 0
